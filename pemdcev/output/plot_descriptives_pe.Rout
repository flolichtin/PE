
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## code to prepare `plot_descriptives_pe` dataset goes here
> 
> devtools::load_all()
ℹ Loading pemdcev
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(PE)
> 
> rm(list = ls())
> 
> par_defaults <- par(no.readonly = TRUE)
> pdf("plot_descriptives_pe.pdf")
> 
> pe <-
+   pe_data_list$main %>%
+   select(-target.reached, -undercomp_r, -undercomp_s)
> 
> pe$undercomp.w.offset_v <- TRUE
> 
> pe_r <-
+   pe %>%
+   select(ID, outside.good, ends_with("_r")) %>%
+   pivot_longer(cols = c(everything(), -ID)) %>%
+   mutate(name = str_remove(name, "_r$")) %>%
+   filter(abs(value) > 0)
> 
> new_order <- with(pe_r, reorder(name, value, median, na.rm = TRUE))
> 
> par(las = 2, mai = par()$mai + c(0.75, 0, 0, 0))
> boxplot(pe_r$value ~ new_order,
+         main = "CO2 of initial emissions (if strategy was chosen)",
+         xlab = "",
+         ylab = "CO2 emission or reduction / initial emissions")
> mtext("Strategy", side = 1, line = 6, las = 1)
> abline(h = 0, col = "blue", lty = 2)
> 
> 
> par(par_defaults)
> 
> # strategy, visible, selected, reduction
> data <-
+   pe %>%
+   select(ID, outside.good, matches("_v$|_r$")) %>%
+   mutate(outside.good_v = TRUE,
+          outside.good_r = outside.good,
+          tot_v = TRUE) %>%
+   select(-outside.good) %>%
+   mutate(across(where(is.logical), as.numeric)) %>%
+   pivot_longer(-ID) %>%
+   mutate(what = strsplit(name, split = "_"),
+          strategy = unlist(map(what, ~ .x[1])),
+          name = unlist(map(what, ~ .x[2]))) %>%
+   select(-what) %>%
+   pivot_wider() %>%
+   mutate(c = ifelse(abs(r) > 0, 1, 0)) %>%
+   select(ID, strategy, visible = v, chosen = c, co2 = r)
> 
> # Add income
> dw <- PE::data_w
> names(dw) <- PE::translate_names(names(dw), vnt = PE::variable_names_table)
> 
> income_levels <-
+   c("under 2000 chf",
+     "2001 to 4000 chf",
+     "4001 to 6000 chf",
+     "6001 to 8000 chf",
+     "8001 to 10000 chf",
+     "10001 to 12000 chf",
+     "12001 to 14000 chf",
+     "14001 to 16000 chf",
+     "16001 to 18000 chf",
+     "above 18000 chf")
> 
> income <-
+   dw %>%
+   select(ID, hh.income = household_net_income_in_chf) %>%
+   PE::to_NA() %>%
+   mutate(hh.income = factor(hh.income, levels = income_levels, ordered = TRUE),
+          hh.income = fct_na_value_to_level(hh.income),
+          b10001 = hh.income < "10001 to 12000 chf") %>%
+   group_by(b10001) %>%
+   mutate(N = n()) %>%
+   ungroup()
> 
> data <-
+   data %>%
+   left_join(income, by = "ID")
> 
> 
> # Example
> plot_strategy <- function(strategy, notch = TRUE) {
+   col <- c("chocolate", "cadetblue4")
+   marker <- "chartreuse3"
+   strat <- strategy
+ 
+   dat <-
+     data %>%
+     filter(strategy == strat)
+ 
+   dat_r <-
+     dat %>%
+     filter(chosen == 1) %>%
+     mutate(N = paste0("N=", N),
+            N_ = factor(N, levels = sort(unique(N))))
+ 
+   l <- levels(dat_r$N_)
+ 
+   dat_v <-
+     dat %>%
+     group_by(N) %>%
+     summarise(perc = sum(visible) / n()) %>%
+     mutate(N = paste0("N=", N),
+            N_ = factor(N, levels = l)) %>%
+     ungroup()
+ 
+   dat_c <-
+     dat %>%
+     filter(visible == 1) %>%
+     group_by(N) %>%
+     summarise(perc = sum(chosen) / n()) %>%
+     mutate(N = paste0("N=", N),
+            N_ = factor(N, levels = l)) %>%
+     ungroup()
+ 
+   boxplot(co2 ~ N_, data = dat_r, notch = notch,
+           main = strat,
+           ylim = c(-0.1, 1),
+           xlab = "HH net income below 10'001 CHF per month",
+           ylab = "CO2 reduction / initial emissions",
+           col = col,
+           n)
+ 
+   points(dat_v$N_, dat_v$perc, col = marker, pch = 1, cex = 1.5, lwd = 3)
+   points(dat_c$N_, dat_c$perc, col = marker, pch = 3, cex = 1.5, lwd = 3)
+   legend("topleft", legend = c("Lower income", "Hihger income", "Visible", "Chosen | Visible"),
+          pch = c(15, 15, 1, 3), col = c(col, rep(marker, 2)), bty = "n")
+ }
> 
> # plot_strategy("undercomp.w.offset")
> 
> plt <- Plot({
+   strategies <- unique(data$strategy)
+   # par(mfrow = c(3, 6))
+   for (s in strategies) {
+     plot_strategy(strategy = s)
+   }
+ })
> 
> plt
An object of class "Plot"
function () 
{
    eval(expr, envir = parent.frame())
}
<environment: 0x55b01353f428>
Slot ".plot":
{
    strategies <- unique(data$strategy)
    for (s in strategies) {
        plot_strategy(strategy = s)
    }
}

> # plt()
> 
> 
> # for all income levels
> ## data (from plot_descriptives_pe)
> plot_all_inc <- function(strat, notch = FALSE, notch_width = 0.1, notch_color = "darkorange",
+                          point_color = "blue4") {
+   dat_f <- filter(data, strategy == strat)
+   dat_v <- dat_f %>%
+     group_by(hh.income) %>%
+     summarise(perc = sum(visible) / n())
+   dat_c <- dat_f %>%
+     group_by(hh.income) %>%
+     summarise(perc = sum(chosen) / n())
+   dat_cv <- dat_f %>%
+     filter(visible == 1) %>%
+     group_by(hh.income) %>%
+     summarise(perc = sum(chosen) / n())
+   max_ <- max(dat_v$perc, dat_c$perc, dat_cv$perc)
+   dat <- subset(data, subset = strategy == strat & co2 > 0)
+   inc <- count(dat, hh.income)
+   n_levels <- length(levels(dat$hh.income))
+   N <- length(unique(dat$ID))
+   title <- paste0(strat, " (N chosen = ", N, ")")
+   x <- boxplot(co2 ~ hh.income, data = dat, notch = notch, xlab = " ",
+                width = rep(1, n_levels), space = 0.5, ylim = c(0, max_ + 0.2),
+                main = title,
+                las = 3,
+                col = "lightblue",
+                xaxt = "n")
+   axis(1, at = 1:n_levels, labels = abbreviate(levels(dat$hh.income)), las = 2)
+   conf <- x$conf
+   for (i in seq(n_levels)) {
+     segments(x0 = i - notch_width, y0 = conf[2, i], x1 = i + notch_width, y1 = conf[2, i], col = notch_color)
+     segments(x0 = i - notch_width, y0 = conf[1, i], x1 = i + notch_width, y1 = conf[1, i], col = notch_color)
+     segments(x0 = i, y0 = conf[1, i], x1 = i, y1 = conf[2, i], col = notch_color, lty = 3)
+   }
+   stats <- x$stats
+   m <- stats[3, ]
+   text(x = seq(n_levels), y = max_ + 0.05, labels = inc$n, srt = 90, adj = -0.2)
+   mtext("co2 > 0", side = 3, las = 1, line = 0.5)
+   points(dat_v$hh.income, dat_v$perc, col = point_color, pch = 3, lwd = 2)
+   points(dat_c$hh.income, dat_c$perc, col = point_color, pch = 4, lwd = 2)
+   points(dat_cv$hh.income, dat_cv$perc, col = point_color, pch = 8, lwd = 2)
+   legend("topright", legend = c("visible", "chosen | visible", "chosen"), pch = c(3, 8, 4))
+ }
> 
> plot_all_inc(strat = "inslt.rf")
> 
> # par(mfrow = c(3, 6),
> #     mai=c(0.5, 0.6, 0.6, 0.2))
> strats <- unique(data$strategy)
> for (s in strats) {
+   plot_all_inc(strat = s)
+ }
> 
> dev.off()
pdf 
  2 
> 
> usethis::use_data(plot_descriptives_pe, overwrite = TRUE)
✔ Setting active project to '/home/daniehei/pemdcev'
✔ Saving 'plot_descriptives_pe' to 'data/plot_descriptives_pe.rda'
• Document your data (see 'https://r-pkgs.org/data.html')
Error in (function (..., list = character(), file = stop("'file' must be specified"),  : 
  object ‘plot_descriptives_pe’ not found
Calls: <Anonymous> -> mapply -> <Anonymous>
Execution halted
